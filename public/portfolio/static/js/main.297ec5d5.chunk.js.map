{"version":3,"sources":["component/copyright.js","component/blueprint/blueprint-form-edit.js","form/blueprint-form-modal.js","model/blueprint-model.js","component/blueprint/tier-list-form.js","component/loading-circle.js","contaner/blueprint-view.js","form/question.js","form/blueprint-type-modal.js","contaner/dashboard-main-content.js","model/energy-model.js","helper/color-gradient-generator.js","component/energy-calculator.js","component/not-found.js","route/HomeRoute.js","route/HomeLink.js","contaner/dashboard.js","App.js","index.js"],"names":["Copyright","Typography","variant","color","align","Link","href","Date","getFullYear","BlueprintFormEdit","blueprint","dialogActions","onFormSubmit","values","formikAction","a","setSubmitting","patchBlueprints","close","initialValues","validate","onSubmit","actions","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","Input","type","name","onChange","onBlur","value","marketValue","email","BlueprintFormModal","blueprints","useState","isDialogOpen","setDialogState","getDialogActions","open","cancel","Button","onClick","Dialog","onClose","DialogTitle","DialogContent","map","DialogActions","disabled","TABLE_HEADER","selector","sortable","cell","row","id","tier","ratio_value_xp","TIER_LIST","fetchBlueprints","tiers","page","itemsPerPage","itemType","typesParams","length","getBlueprintTypeParams","tierParams","getTierParams","url","axios","get","response","console","log","data","est_market_premium","est_market_value","merchantXp","toFixed","totalItems","fetchItemTypes","result","itemTypes","item","sortedUniq","patch","headers","filter","reduce","accumulator","types","key","TierListForm","handleDialogSubmit","render","arrayHelpers","FormGroup","index","label","FormControlLabel","control","Checkbox","checked","e","target","replace","renderCheckbox","LoadingCircle","size","style","padding","CircularProgress","BlueprintView","tableData","setTableData","setPage","totalRows","setTotalRows","setItemsPerPage","isLoading","setLoading","selectedRows","updateSelectedRows","toggleCleared","useEffect","loadBlueprint","contextActions","React","useMemo","title","columns","defaultSortField","highlightOnHover","pagination","paginationServer","paginationTotalRows","progressComponent","progressPending","selectableRows","onChangePage","newPage","onChangeRowsPerPage","newItemsPerPage","onSelectedRowsChange","newRows","clearSelectedRows","Question","defaultValue","BlueprintTypeModal","handleFormSubmit","blueprintTypes","setBlueprintTypes","checkedElements","setCheckedElements","loadItemTypes","sortedItemTypes","includes","push","remove","DashboardMainContent","updateTiers","updateItemTypes","Grid","md","newItemTypes","newTiers","calculateSmallTalkEnergy","currentEnergy","maxEnergy","energyGained","calculateEnergyGain","maxEnergyGained","calculateMaxEnergyGain","backfireEnergy","calculateBackfireEnergy","efficiency","calculateFirstAttemptEfficiency","gain","maxGain","backfire","isEfficient","feelingLucky","parseFloat","maxBackfireEnergy","Math","floor","successRate","gainEnergy","gainEfficiency","ColorGradientGenerator","colorFrom","colorTo","rainbow","Color","setSpectrum","setNumberRange","colorGenerator","EnergyCalculator","currentEenergy","formData","setFormData","smallTalkEnergy","setSmallTalkEnergy","smallTalkData","setSmallTalkData","stepSize","i","table","calculateSmallTalkEffciencyData","EnergySchema","Yup","shape","min","max","required","renderForm","validationSchema","isValidating","m","as","TextField","error","helperText","onFocus","select","vartian","renderResult","Box","component","textAlign","className","CssBaseline","Container","maxWidth","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","domain","fill","uv","colorAt","getFillColor","NotFound","HomeRoute","exact","path","LINKS","uri","HomeLink","wrapper","List","to","useStyles","makeStyles","theme","root","display","toolbar","paddingRight","toolbarIcon","alignItems","justifyContent","mixins","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","marginRight","menuButtonHidden","flexGrow","drawerPaper","position","whiteSpace","drawerPaperClose","overflowX","spacing","breakpoints","up","appBarSpacer","content","overflow","container","paddingTop","paddingBottom","paper","flexDirection","fixedHeight","Dashboard","classes","setOpen","Drawer","clsx","IconButton","Divider","appbar","AppBar","Toolbar","edge","aria-label","noWrap","Badge","badgeContent","xs","Paper","pt","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.297ec5d5.chunk.js","sourcesContent":["import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Link from \"@material-ui/core/Link\";\n\nconst Copyright = () => {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {\"Copyright © \"}\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\n        Halp Gaming | Halp Gaming TS\n      </Link>{\" \"}\n      {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n};\n\nexport default Copyright;\n","import React from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { Input, Button } from \"@material-ui/core\";\r\nimport { patchBlueprints } from \"../../model/blueprint-model\";\r\n\r\nconst formValidation = (values) => {\r\n  const errors = {};\r\n  return errors;\r\n};\r\n\r\nconst BlueprintFormEdit = ({ blueprint, dialogActions }) => {\r\n  const onFormSubmit = async (values, formikAction) => {\r\n    formikAction.setSubmitting(true);\r\n    const response = patchBlueprints(values);\r\n    formikAction.setSubmitting(false);\r\n    dialogActions.close();\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={blueprint}\r\n      validate={(values) => formValidation(values)}\r\n      onSubmit={(values, actions) => onFormSubmit(values, actions)}\r\n    >\r\n      {({\r\n        values,\r\n        errors,\r\n        touched,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        isSubmitting,\r\n        /* and other goodies */\r\n      }) => (\r\n        <Form onSubmit={handleSubmit}>\r\n          <Input\r\n            type=\"text\"\r\n            name=\"marketValue\"\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            value={values.marketValue}\r\n          />\r\n          {errors.email && touched.email && errors.email}\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default BlueprintFormEdit;\r\n","import React, { useState, useEffect, Fragment } from \"react\";\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogContent,\r\n  DialogTitle,\r\n  DialogActions,\r\n} from \"@material-ui/core\";\r\n\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport BlueprintFormEdit from \"../component/blueprint/blueprint-form-edit\";\r\n\r\nexport const BlueprintFormModal = ({ blueprints }) => {\r\n  const [isDialogOpen, setDialogState] = useState(false);\r\n  const [isSubmitting, setSubmitting] = useState(false);\r\n\r\n  const getDialogActions = () => {\r\n    return {\r\n      open: () => setDialogState(true),\r\n      close: () => {\r\n        setDialogState(false);\r\n      },\r\n      cancel: () => setDialogState(false),\r\n    };\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Button\r\n        variant=\"outlined\"\r\n        color=\"primary\"\r\n        onClick={getDialogActions().open}\r\n      >\r\n        Edit <EditIcon/>\r\n      </Button>\r\n\r\n      <Dialog open={isDialogOpen} onClose={getDialogActions().close}>\r\n        <DialogTitle>Edit Blueprints</DialogTitle>\r\n\r\n        <DialogContent>\r\n          {blueprints.map((blueprint) => {\r\n            return (\r\n              <Fragment>\r\n                <ul>\r\n                  <li>\r\n                    {blueprint.name} [{blueprint.type}]\r\n                  </li>\r\n                  <li>Current Market Value: {blueprint.marketValue}</li>\r\n                </ul>\r\n\r\n                <BlueprintFormEdit\r\n                  blueprint={blueprint}\r\n                  dialogActions={getDialogActions()}\r\n                ></BlueprintFormEdit>\r\n              </Fragment>\r\n            );\r\n          })}\r\n        </DialogContent>\r\n\r\n        <DialogActions>\r\n          <div>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              disabled={isSubmitting}\r\n            >\r\n              Submit\r\n            </Button>\r\n          </div>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default BlueprintFormModal;\r\n","import React from \"react\";\nimport axios from \"axios\";\nimport {sortedUniq} from 'lodash';\nimport BlueprintFormModal from \"../form/blueprint-form-modal\";\n\nexport const updateBlueprint = (id, newData) => {};\n\nexport const TABLE_HEADER = [\n  {\n    name: \"ID\",\n    selector: \"id\",\n    sortable: true,\n    cell: (row) => row.id,\n  },\n  {\n    name: \"Type\",\n    selector: \"type\",\n    sortable: true,\n    cell: (row) => row.type,\n  },\n  {\n    name: \"Name\",\n    selector: \"name\",\n    sortable: true,\n    cell: (row) => row.name,\n  },\n  {\n    name: \"Tier\",\n    selector: \"tier\",\n    sortable: true,\n    cell: (row) => row.tier,\n  },\n  {\n    name: \"Value\",\n    selector: \"value\",\n    sortable: true,\n    cell: (row) => row.value,\n  },\n  {\n    name: \"Market Value\",\n    selector: \"marketValue\",\n    sortable: true,\n    cell: (row) => row.marketValue\n  },\n  {\n    name: \"Merchant Exp\",\n    selector: \"merchantXp\",\n    sortable: true,\n  },\n  {\n    name: \"Value:Exp\",\n    selector: \"ratio_value_xp\",\n    sortable: true,\n    cell: (row) => row.ratio_value_xp,\n  },\n];\n\nexport const TIER_LIST = [\n  { name: \"1\", value: true },\n  { name: \"2\", value: true },\n  { name: \"3\", value: true },\n  { name: \"4\", value: true },\n  { name: \"5\", value: true },\n  { name: \"6\", value: true },\n  { name: \"7\", value: true },\n  { name: \"8\", value: true },\n  { name: \"9\", value: true },\n];\n\n/**\n *\n * @param {*} blueprints\n */\nexport const PIPE_CALCULATION = (blueprints) => {\n  return blueprints.map((blueprint) => {\n    blueprint.est_market_premium = 1;\n    blueprint.est_market_value = blueprint.value * blueprint.est_market_premium;\n    blueprint.ratio_value_xp = (\n      blueprint.merchantXp / blueprint.est_market_value\n    ).toFixed(3);\n    return blueprint;\n  });\n};\n\n/**\n *\n * @param {*} tiers\n * @param {*} page\n */\nexport const fetchBlueprints = async (tiers, page, itemsPerPage, itemType) => {\n  const typesParams = itemType.length > 0 ? getBlueprintTypeParams(itemType) : '';\n  const tierParams = tiers.length > 0 ? getTierParams(tiers) : '';\n  const url = `http://localhost:80/api/v1/blueprints?order[merchant_xp]=desc${tierParams}${typesParams}&page=${page}&itemsPerPage=${itemsPerPage}`;\n  const response = await axios.get(url);\n\n  console.log(response);\n\n  return {\n    data: PIPE_CALCULATION(response.data[\"hydra:member\"]),\n    totalItems: response.data[\"hydra:totalItems\"],\n  };\n};\n\nexport const fetchItemTypes = async () => {\n  const url = 'http://localhost:80/api/v1/item_types';\n  const response = await axios.get(url);\n  const result = response.data[\"hydra:member\"];\n\n  const itemTypes = result.map((item) => {\n    return item.name;\n  });\n\n  return sortedUniq(itemTypes);\n}\n\n/**\n *\n * @param {*} id\n * @param {*} marketValue\n */\nexport const patchBlueprints = async (blueprint) => {\n  console.log(blueprint);\n  const url = `http://localhost:80/api/v1/blueprints/${blueprint.id}`;\n\n  return await axios.patch(url, blueprint, {\n    headers: {\n      \"content-type\": 'application/merge-patch+json'\n    }\n  });\n};\n\nexport const getTierParams = (tiers) => {  \n  return tiers\n    .filter((tier) => {\n      return tier.value === true;\n    })\n    .reduce((accumulator, tier) => accumulator + `&tier=${tier.name}`, \"\");\n};\n\nexport const getBlueprintTypeParams = (types) => {\n  return types\n    .filter((type) => {\n      return type.value === true;\n    })\n    .reduce((accumulator, type) => accumulator + `&type=${type.key}`);\n};\n","import React from \"react\";\nimport {\n  Button,\n  FormControlLabel,\n  Checkbox,\n  FormGroup,\n} from \"@material-ui/core\";\nimport { TIER_LIST } from \"./../../model/blueprint-model\";\nimport { Formik, Form, FieldArray } from \"formik\";\n\nconst TierListForm = ({ handleDialogSubmit }) => {\n  const formValidation = () => {};\n\n  const onFormSubmit = (values, actions) => {\n    actions.setSubmitting(true);\n    handleDialogSubmit(values);\n    actions.setSubmitting(false);\n  };\n\n  const renderCheckbox = (arrayHelpers, tier, index) => {\n    const label = `Tier ${tier.name}`;\n\n    return (\n      <FormControlLabel\n        key={tier.key}\n        label={label}\n        control={\n          <Checkbox\n            value={tier.name}\n            checked={tier.value}\n            onChange={(e) => {\n              tier.value = e.target.checked;\n              arrayHelpers.replace(index, tier);\n            }}\n          ></Checkbox>\n        }\n      ></FormControlLabel>\n    );\n  };\n\n  return (\n    <Formik\n      initialValues={TIER_LIST}\n      validate={(values) => formValidation(values)}\n      onSubmit={(values, actions) => onFormSubmit(values, actions)}\n    >\n      {({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <Form onSubmit={handleSubmit}>\n          <FieldArray\n            name=\"tiers\"\n            render={(arrayHelpers) => (\n              <FormGroup>\n                {TIER_LIST.map((tier, index) => {\n                  return renderCheckbox(arrayHelpers, tier, index);\n                })}\n              </FormGroup>\n            )}\n          />\n\n          <div>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={isSubmitting}\n            >\n              Apply\n            </Button>\n          </div>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default TierListForm;\n","import React from \"react\";\nimport { CircularProgress } from \"@material-ui/core\";\n\nconst LoadingCircle = ({size}) => {\n  return (\n    <div style={{ padding: \"24px\" }}>\n      <CircularProgress size={75} />\n    </div>\n  );\n};\n\nexport default LoadingCircle;\n","import React, { useState, useEffect, Fragment } from \"react\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\n\r\nimport {\r\n  TABLE_HEADER,\r\n  fetchBlueprints,\r\n} from \"./../model/blueprint-model\";\r\n\r\nimport LoadingCircle from \"./../component/loading-circle\";\r\nimport BlueprintFormModal from \"../form/blueprint-form-modal\";\r\n\r\nconst BlueprintView = ({ tiers, itemTypes }) => {\r\n  const [tableData, setTableData] = useState([]);\r\n  const [page, setPage] = useState(1);\r\n  const [totalRows, setTotalRows] = useState(0);\r\n  const [itemsPerPage, setItemsPerPage] = useState(10);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [selectedRows, updateSelectedRows] = useState();\r\n  const [toggleCleared, setToggleCleared] = useState(false);\r\n\r\n  useEffect(() => {\r\n    loadBlueprint();\r\n  }, [page, itemsPerPage, tiers, itemTypes]);\r\n\r\n  const loadBlueprint = async () => {\r\n    setLoading(true);\r\n    const blueprints = await fetchBlueprints(\r\n      tiers,\r\n      page,\r\n      itemsPerPage,\r\n      itemTypes\r\n    );\r\n\r\n    setTableData(blueprints.data);\r\n    setTotalRows(blueprints.totalItems);\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  const handlePageChange = (newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleRowsPerPageChange = (newItemsPerPage, page) => {\r\n    setPage(page);\r\n    setItemsPerPage(newItemsPerPage);\r\n  };\r\n\r\n  const contextActions = React.useMemo(() => {\r\n    if (selectedRows) {\r\n      return (\r\n        <BlueprintFormModal\r\n          blueprints={selectedRows.selectedRows}\r\n        ></BlueprintFormModal>\r\n      );\r\n    }\r\n  }, [tableData, selectedRows]);\r\n\r\n  return (\r\n    <Fragment>\r\n\r\n      <RefreshIcon onClick={loadBlueprint}></RefreshIcon>\r\n\r\n      <DataTable\r\n        title=\"Blueprints\"\r\n        columns={TABLE_HEADER}\r\n        data={tableData}\r\n        defaultSortField=\"value\"\r\n        highlightOnHover\r\n        pagination\r\n        paginationServer\r\n        paginationTotalRows={totalRows}\r\n        progressComponent={<LoadingCircle size=\"75\" />}\r\n        progressPending={isLoading}\r\n        selectableRows\r\n        onChangePage={handlePageChange}\r\n        onChangeRowsPerPage={handleRowsPerPageChange}\r\n        onSelectedRowsChange={(newRows) => updateSelectedRows(newRows)}\r\n        contextActions={contextActions}\r\n        clearSelectedRows={toggleCleared}\r\n      />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default BlueprintView;\r\n","import React from 'react';\r\nimport {Input} from '@material-ui/core';\r\n\r\nconst Question = () => {\r\n\r\n    return(\r\n        <Input defaultValue=\"What is the cheapest item?\" />\r\n    );\r\n}\r\n\r\nexport default Question;\r\n","import React, { useState, useEffect, Fragment } from \"react\";\r\n\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogContent,\r\n  DialogTitle,\r\n  DialogActions,\r\n  FormControlLabel,\r\n  Checkbox,\r\n  FormGroup,\r\n} from \"@material-ui/core\";\r\n\r\nimport { Formik, Form, FieldArray } from \"formik\";\r\nimport { fetchItemTypes } from \"../model/blueprint-model\";\r\n\r\nexport const BlueprintTypeModal = ({ handleFormSubmit }) => {\r\n  const [blueprintTypes, setBlueprintTypes] = useState([]);\r\n  const [isDialogOpen, setDialogState] = useState(false);\r\n  const [checkedElements, setCheckedElements] = useState([]);\r\n\r\n  useEffect(() => {\r\n    loadItemTypes();\r\n  }, [blueprintTypes]);\r\n\r\n  const loadItemTypes = async () => {\r\n    const sortedItemTypes = await fetchItemTypes();\r\n    setBlueprintTypes(sortedItemTypes);\r\n    setCheckedElements(sortedItemTypes);\r\n  };\r\n\r\n  const getDialogActions = () => {\r\n    return {\r\n      open: () => setDialogState(true),\r\n      close: () => {\r\n        setDialogState(false);\r\n      },\r\n      cancel: () => setDialogState(false),\r\n    };\r\n  };\r\n\r\n  const onFormSubmit = (values, actions) => {\r\n    actions.setSubmitting(true);\r\n    handleFormSubmit(values);\r\n    setDialogState(false);\r\n    actions.setSubmitting(false);\r\n  };\r\n\r\n  const renderCheckbox = (arrayHelpers, item, index) => {\r\n    return (\r\n      <FormControlLabel\r\n        key={item}\r\n        label={item}\r\n        control={\r\n          <Checkbox\r\n            value={item}\r\n            checked={checkedElements.includes(item)}\r\n            onChange={(e) => {\r\n\r\n              console.log(arrayHelpers);\r\n\r\n              if (e.target.checked) {\r\n                arrayHelpers.push(item)\r\n              }\r\n              else {\r\n                arrayHelpers.remove(index);\r\n              }\r\n\r\n              console.log(arrayHelpers);\r\n              setCheckedElements(arrayHelpers);\r\n            }}\r\n          ></Checkbox>\r\n        }\r\n      ></FormControlLabel>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Button\r\n        variant=\"outlined\"\r\n        color=\"primary\"\r\n        onClick={getDialogActions().open}\r\n      >\r\n        Filter Type\r\n      </Button>\r\n\r\n      <Dialog open={isDialogOpen} onClose={getDialogActions().close}>\r\n        <DialogTitle>Item Type</DialogTitle>\r\n\r\n        <DialogContent>\r\n          {blueprintTypes.length ? (\r\n            <Formik\r\n              initialValues={blueprintTypes}\r\n              onSubmit={(values, actions) => onFormSubmit(values, actions)}\r\n            >\r\n              {({\r\n                values,\r\n                errors,\r\n                touched,\r\n                handleChange,\r\n                handleBlur,\r\n                handleSubmit,\r\n                isSubmitting,\r\n              }) => (\r\n                <Form onSubmit={handleSubmit}>\r\n                  <FieldArray\r\n                    name=\"blueprintTypes\"\r\n                    render={(arrayHelpers) => (\r\n                      <Fragment>\r\n                        <FormGroup>\r\n                          {blueprintTypes.map((itemType, index) => {\r\n                            return renderCheckbox(\r\n                              arrayHelpers,\r\n                              itemType,\r\n                              index\r\n                            );\r\n                          })}\r\n                        </FormGroup>\r\n\r\n                        <DialogActions>\r\n                          <div>\r\n                            <Button\r\n                              type=\"submit\"\r\n                              variant=\"contained\"\r\n                              color=\"primary\"\r\n                              disabled={isSubmitting}\r\n                            >\r\n                              Apply Filter\r\n                            </Button>\r\n                          </div>\r\n                        </DialogActions>\r\n                      </Fragment>\r\n                    )}\r\n                  />\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          ) : (\r\n            <p>Item Types Unavailable</p>\r\n          )}\r\n        </DialogContent>\r\n      </Dialog>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default BlueprintTypeModal;\r\n","import React, { useEffect, useState, Fragment } from \"react\";\r\n\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  Grid,\r\n} from \"@material-ui/core\";\r\n\r\nimport TierListForm from \"../component/blueprint/tier-list-form\";\r\nimport BlueprintView from \"./blueprint-view\";\r\nimport Question from \"./../form/question\";\r\nimport { TIER_LIST} from \"./../model/blueprint-model\";\r\nimport { BlueprintTypeModal } from \"./../form/blueprint-type-modal\";\r\n\r\nconst DashboardMainContent = () => {\r\n  const [isDialogOpen, setDialogState] = useState(false);\r\n  const [tiers, updateTiers] = useState(TIER_LIST);\r\n  const [itemTypes, updateItemTypes] = useState([]);\r\n\r\n  const handleDialogOpen = () => {\r\n    setDialogState(true);\r\n  };\r\n\r\n  const handleDialogClose = () => {\r\n    setDialogState(false);\r\n  };\r\n\r\n  const handleTierFormSubmit = (newTiers) => {\r\n    setDialogState(false);\r\n    updateTiers(newTiers);\r\n    console.log(newTiers);\r\n  };\r\n\r\n  const handleItemTypeFormSubmit = (newItemTypes) => {\r\n    setDialogState(false);\r\n    updateItemTypes(newItemTypes);\r\n    console.log(newItemTypes);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Grid item md={4}>\r\n          <div>best sword value</div>\r\n          <div>most merchant exp</div>\r\n          <div>How did I do?</div>\r\n\r\n        <Question />\r\n      </Grid>\r\n\r\n      <BlueprintTypeModal\r\n        handleFormSubmit={handleItemTypeFormSubmit}\r\n      ></BlueprintTypeModal>\r\n\r\n      <Grid item md={4}>\r\n        <Button variant=\"outlined\" color=\"primary\" onClick={handleDialogOpen}>\r\n          Filter Tier\r\n        </Button>\r\n\r\n        <Dialog open={isDialogOpen} onClose={handleDialogClose}>\r\n          <DialogTitle id=\"form-filter-dialog-title\">Tier Filter</DialogTitle>\r\n\r\n          <DialogContent>\r\n            <TierListForm handleDialogSubmit={handleTierFormSubmit} />\r\n          </DialogContent>\r\n        </Dialog>\r\n      </Grid>\r\n\r\n      <BlueprintView tiers={tiers} itemTypes={itemTypes} />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default DashboardMainContent;\r\n","const SMALL_TALK_SUCCESS_RATE = .75;\r\nconst LUCK_RATE = .80;\r\n\r\nexport const calculateSmallTalkEnergy = (currentEnergy, maxEnergy) => {\r\n  const energyGained = calculateEnergyGain(currentEnergy, maxEnergy);\r\n  const maxEnergyGained = calculateMaxEnergyGain(maxEnergy);\r\n  const backfireEnergy = calculateBackfireEnergy(currentEnergy, maxEnergy);\r\n  const efficiency = calculateFirstAttemptEfficiency(\r\n    SMALL_TALK_SUCCESS_RATE,\r\n    energyGained,\r\n    backfireEnergy\r\n  );\r\n\r\n  const luckEfficiency = calculateFirstAttemptEfficiency(\r\n    LUCK_RATE,\r\n    energyGained,\r\n    backfireEnergy\r\n  );\r\n\r\n  const stats = {\r\n    gain: energyGained,\r\n    maxGain: maxEnergyGained,\r\n    backfire: backfireEnergy,\r\n    isEfficient: efficiency > 49.99,\r\n    feelingLucky: luckEfficiency > 49.99,\r\n    efficiency: efficiency,\r\n  };\r\n\r\n  return stats;\r\n};\r\n\r\n/**\r\n * The amount of energy gained.\r\n */\r\nexport const calculateEnergyGain = (currentEnergy, maxEnergy) => {\r\n  let energyGained = 0;\r\n\r\n  if (currentEnergy >= maxEnergy) {\r\n    return 0;\r\n  }\r\n\r\n  energyGained = (maxEnergy - currentEnergy) / 10;\r\n\r\n  return parseFloat(energyGained);\r\n};\r\n\r\nexport const calculateBackfireEnergy = (currentEnergy, maxEnergy) => {\r\n  if (maxEnergy > 0) {\r\n    const maxBackfireEnergy = Math.floor(maxEnergy / 7);\r\n    const backfireEnergy =\r\n      maxBackfireEnergy >= currentEnergy ? currentEnergy : maxBackfireEnergy;\r\n\r\n    return backfireEnergy;\r\n  }\r\n\r\n  return 0;\r\n};\r\n\r\n/**\r\n * The maximum amount of of energy to be gained is based on your max energy.\r\n *\r\n * @param {*} maxEnergy\r\n */\r\nexport const calculateMaxEnergyGain = (maxEnergy) => {\r\n  if (maxEnergy < 1) {\r\n    return 0;\r\n  }\r\n\r\n  return Math.floor(maxEnergy / 10);\r\n};\r\n\r\nexport const calculateFirstAttemptEfficiency = (\r\n  successRate,\r\n  gainEnergy,\r\n  backfireEnergy\r\n) => {\r\n\r\n  const gainEfficiency = gainEnergy * successRate;\r\n  const backfireEfficiency = backfireEnergy * (1 - successRate);\r\n\r\n  const exactEfficiency = (gainEfficiency / (gainEfficiency + backfireEfficiency));\r\n\r\n  return parseFloat(exactEfficiency * 100).toFixed(2);\r\n};\r\n\r\nexport const calculateSmallTalkEffciencyData = (maxEnergy, stepSize) => {\r\n  let data = [];\r\n  let smallTalkEnergy = {};\r\n\r\n  for (let i = 0; i <= maxEnergy; i += stepSize) {\r\n    smallTalkEnergy = calculateSmallTalkEnergy(i, maxEnergy);\r\n\r\n    data.push({\r\n      name: i,\r\n      backfire: 100 - smallTalkEnergy.efficiency,\r\n      gain: smallTalkEnergy.efficiency,\r\n    });\r\n  }\r\n\r\n  console.table(data);\r\n\r\n  return data;\r\n};\r\n","import * as Color from 'rainbowvis.js';\r\n\r\nconst ColorGradientGenerator = (colorFrom, colorTo, size) => {\r\n    const rainbow = new Color();\r\n    rainbow.setSpectrum(colorFrom, colorTo);\r\n    rainbow.setNumberRange(0, size);\r\n\r\n    return rainbow;\r\n}\r\n\r\nexport default ColorGradientGenerator;","import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { Formik, Field, Form } from \"formik\";\r\nimport {\r\n  calculateSmallTalkEnergy,\r\n  calculateSmallTalkEffciencyData,\r\n} from \"./../model/energy-model\";\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  Cell,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n} from \"recharts\";\r\nimport {\r\n  Avatar,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemAvatar,\r\n  TextField,\r\n  Button,\r\n  CssBaseline,\r\n  Container,\r\n  Box,\r\n} from \"@material-ui/core\";\r\n\r\nimport ColorGradientGenerator from \"./../helper/color-gradient-generator\";\r\nimport * as Yup from \"yup\";\r\n\r\nconst colorGenerator = ColorGradientGenerator(\"#1C3041\", \"#18F2B2\", 100);\r\n\r\nconst EnergyCalculator = () => {\r\n  const [formData, setFormData] = useState({\r\n    currentEenergy: 0,\r\n    maxEnergy: 200,\r\n  });\r\n  const [smallTalkEnergy, setSmallTalkEnergy] = useState([]);\r\n  const [smallTalkData, setSmallTalkData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setSmallTalkEnergy(\r\n      calculateSmallTalkEnergy(formData.currentEenergy, formData.maxEnergy)\r\n    );\r\n\r\n    setSmallTalkData(\r\n      calculateSmallTalkEffciencyData(\r\n        formData.maxEnergy,\r\n        Math.floor(formData.maxEnergy / 20)\r\n      )\r\n    );\r\n  }, [formData]);\r\n\r\n  const onFormSubmit = (values, actions) => {\r\n    actions.setSubmitting(true);\r\n    setFormData(values);\r\n    console.log(values);\r\n    actions.setSubmitting(false);\r\n  };\r\n\r\n  const getFillColor = (uv) => {\r\n    const i = Math.floor(uv);\r\n    return \"#\" + colorGenerator.colorAt(i);\r\n  };\r\n\r\n  const EnergySchema = Yup.object().shape({\r\n    currentEnergy: Yup.number().min(0).max(100000).required(\"Required\"),\r\n    maxEnergy: Yup.number().min(0).max(100000).required(\"Required\"),\r\n  });\r\n\r\n  const renderForm = (\r\n    <Formik\r\n      initialValues={{\r\n        currentEnergy: 0,\r\n        maxEnergy: 200,\r\n      }}\r\n      onSubmit={onFormSubmit}\r\n      validationSchema={EnergySchema}\r\n    >\r\n      {({\r\n        values,\r\n        errors,\r\n        touched,\r\n        isValidating,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        isSubmitting,\r\n      }) => (\r\n        <Form onSubmit={handleSubmit}>\r\n          <div>\r\n            <Field\r\n              m={4}\r\n              as={TextField}\r\n              variant=\"outlined\"\r\n              type=\"text\"\r\n              name=\"currentEnergy\"\r\n              label=\"Current Energy\"\r\n              required\r\n              error={errors.currentEnergy ? true : false}\r\n              helperText={errors.currentEnergy}\r\n              onFocus={(e) => {\r\n                e.target.select();\r\n              }}\r\n            />\r\n\r\n            <Field\r\n              m={4}\r\n              as={TextField}\r\n              variant=\"outlined\"\r\n              type=\"text\"\r\n              name=\"maxEnergy\"\r\n              label=\"Maximum Energy\"\r\n              required\r\n              onFocus={(e) => {\r\n                e.target.select();\r\n              }}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <Button\r\n              type=\"submit\"\r\n              vartian=\"outlined\"\r\n              color=\"primary\"\r\n              disabled={isSubmitting}\r\n            >\r\n              Calculate\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n\r\n  const renderResult = (\r\n    <Fragment>\r\n      <Box component=\"h3\">\r\n        {smallTalkEnergy.isEfficient\r\n          ? \"You should small talk.\"\r\n          : \"Do not small talk.\"}\r\n        {!smallTalkEnergy.isEfficient && smallTalkEnergy.feelingLucky\r\n          ? \"Give it a shot if you're feeling lucky.\"\r\n          : \"\"}\r\n      </Box>\r\n\r\n      <Box textAlign=\"left\" m={1}>\r\n        If successful, you will gain <b>{smallTalkEnergy.gain} energy</b>.\r\n      </Box>\r\n\r\n      <Box textAlign=\"left\" m={1}>\r\n        The NPC can backfire <b>{smallTalkEnergy.backfire} energy</b>.\r\n      </Box>\r\n    </Fragment>\r\n  );\r\n\r\n  return (\r\n    <Fragment>\r\n      <h2>Small Talk Energy</h2>\r\n      {renderForm}\r\n\r\n      <div className=\"chart-container\">\r\n        {smallTalkData.length < 1 ? (\r\n          <Fragment>\r\n            <CssBaseline />\r\n            <Container maxWidth=\"sm\">\r\n              <p>\r\n                Please enter your current and maximum energy to determine\r\n                wheather or not to talk to NPC.\r\n              </p>\r\n            </Container>\r\n          </Fragment>\r\n        ) : (\r\n          <Fragment>\r\n            <BarChart\r\n              data={smallTalkData}\r\n              width={1080}\r\n              height={300}\r\n              margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\r\n            >\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"name\" />\r\n              <YAxis domain={[0, 100]} />\r\n              <Tooltip />\r\n              <Legend />\r\n              <Bar dataKey=\"gain\" fill=\"#82ca9d\">\r\n                {smallTalkData.map((data, i) => {\r\n                  const color = getFillColor(data.gain);\r\n                  return <Cell key={i} fill={color} />;\r\n                })}\r\n              </Bar>\r\n            </BarChart>\r\n\r\n            {renderResult}\r\n          </Fragment>\r\n        )}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default EnergyCalculator;\r\n","import React from \"react\";\r\n\r\nconst NotFound = () => {\r\n  return(<h2>NOT FOUND</h2>);\r\n};\r\n\r\nexport default NotFound;\r\n","import React from \"react\";\r\nimport { Route, Link, BrowserRouter as Router, Switch } from \"react-router-dom\";\r\nimport DashboardMainContent from \"./../contaner/dashboard-main-content\";\r\nimport EnergyCalculator from \"./../component/energy-calculator\";\r\nimport NotFound from \"./../component/not-found\";\r\n\r\nconst HomeRoute = () => {\r\n  return (\r\n    <Route>\r\n      <div>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={DashboardMainContent} />\r\n          <Route path=\"/small-talk\" component={EnergyCalculator} />\r\n          <Route component={NotFound} />\r\n        </Switch>\r\n      </div>\r\n    </Route>\r\n  );\r\n};\r\n\r\nexport default HomeRoute;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { List } from \"@material-ui/core\";\r\n\r\nconst LINKS = [\r\n  { uri: \"/\", label: \"Blueprints\" },\r\n  { uri: \"/small-talk\", label: \"Small Talk\" },\r\n  { uri: \"/example\", label: \"Example\" },\r\n];\r\n\r\nconst HomeLink = ({ wrapper }) => {\r\n  const renderLink = () => {\r\n    return LINKS.map((item, i) => {\r\n      return <List key={i}><Link key={i} to={item.uri}>{item.label}</Link></List>;\r\n    });\r\n  };\r\n\r\n  return renderLink();\r\n};\r\n\r\nexport default HomeLink;\r\n","import React from \"react\";\r\nimport clsx from \"clsx\";\r\n\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\r\n\r\nimport Copyright from \"./../component/copyright\";\r\nimport HomeRoute from \"../route/HomeRoute\";\r\nimport HomeLink from \"../route/HomeLink\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nconst Dashboard = ({ title }) => {\r\n  const classes = useStyles();\r\n\r\n  // const [classes, setClasses] = React.useState(useStyles());\r\n  const [open, setOpen] = React.useState(true);\r\n  const handleDrawerOpen = () => setOpen(true);\r\n  const handleDrawerClose = () => setOpen(false);\r\n\r\n  const drawer = (\r\n    <Drawer\r\n      variant=\"permanent\"\r\n      classes={{\r\n        paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n      }}\r\n      open={open}\r\n    >\r\n      <div className={classes.toolbarIcon}>\r\n        <IconButton onClick={handleDrawerClose}>\r\n          <ChevronLeftIcon />\r\n        </IconButton>\r\n      </div>\r\n      <Divider />\r\n      <HomeLink></HomeLink>\r\n      <Divider />\r\n      <List>Some more list items</List>\r\n    </Drawer>\r\n  );\r\n\r\n  const appbar = (\r\n    <AppBar\r\n      position=\"absolute\"\r\n      className={clsx(classes.appBar, open && classes.appBarShift)}\r\n    >\r\n      <Toolbar className={classes.toolbar}>\r\n        <IconButton\r\n          edge=\"start\"\r\n          color=\"inherit\"\r\n          aria-label=\"open drawer\"\r\n          onClick={handleDrawerOpen}\r\n          className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n        >\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <Typography\r\n          component=\"h1\"\r\n          variant=\"h6\"\r\n          color=\"inherit\"\r\n          noWrap\r\n          className={classes.title}\r\n        >\r\n          {title}\r\n        </Typography>\r\n        <IconButton color=\"inherit\">\r\n          <Badge badgeContent={4} color=\"secondary\">\r\n            <NotificationsIcon />\r\n          </Badge>\r\n        </IconButton>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n\r\n      {appbar}\r\n      {drawer}\r\n\r\n      <main className={classes.content}>\r\n        <div className={classes.appBarSpacer} />\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <Paper className={classes.paper}>\r\n                <HomeRoute></HomeRoute>\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Box pt={4}>\r\n            <Copyright />\r\n          </Box>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\nimport './App.css';\nimport Dashboard from './contaner/dashboard';\n\nfunction App() {\n\n  console.log('%c Halp Gaming Titan Shop', 'background: rgb(24, 242, 178); color: #FFFFFF; font-size: 36px');\n\n  return (\n    <div className=\"App\">\n      <Dashboard title=\"HG - Titan Shop\"/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}